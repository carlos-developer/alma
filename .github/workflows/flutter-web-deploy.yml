name: Flutter Web Deploy to GitHub Pages

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      deploy_message:
        description: 'Custom deployment message'
        required: false
        default: 'Manual deployment triggered'
      skip_tests:
        description: 'Skip tests (yes/no)'
        required: false
        default: 'no'

# Permisos necesarios para GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Configuraci√≥n para evitar m√∫ltiples deploys simult√°neos
concurrency:
  group: "pages-deployment"
  cancel-in-progress: false

jobs:
  # Job 1: An√°lisis y Testing
  analyze-and-test:
    name: Analyze and Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event.inputs.skip_tests != 'yes'
    
    steps:
    - name: üìö Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: üéØ Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.4'
        channel: 'stable'
        cache: true
    
    - name: üì¶ Get dependencies
      run: flutter pub get
    
    - name: üîç Analyze code
      run: flutter analyze --no-fatal-infos --no-fatal-warnings
    
    - name: üß™ Run tests
      run: flutter test --coverage
    
    - name: üìä Upload coverage
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-report
        path: coverage/

  # Job 2: Build y Deploy
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [analyze-and-test]
    if: |
      always() && 
      (needs.analyze-and-test.result == 'success' || needs.analyze-and-test.result == 'skipped') &&
      (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    
    steps:
    # 1. Checkout del c√≥digo
    - name: üìö Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    # 2. Configurar informaci√≥n del repositorio
    - name: ‚ÑπÔ∏è Get repository info
      id: repo_info
      run: |
        REPO_NAME=$(echo ${{ github.repository }} | cut -d'/' -f2)
        REPO_OWNER=$(echo ${{ github.repository }} | cut -d'/' -f1)
        echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT
        echo "repo_owner=$REPO_OWNER" >> $GITHUB_OUTPUT
        echo "deploy_url=https://${REPO_OWNER}.github.io/${REPO_NAME}/" >> $GITHUB_OUTPUT
        echo "üì¶ Repository: $REPO_NAME"
        echo "üë§ Owner: $REPO_OWNER"
        echo "üåê Deploy URL: https://${REPO_OWNER}.github.io/${REPO_NAME}/"
    
    # 3. Configurar Flutter con versi√≥n correcta
    - name: üéØ Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.4'
        channel: 'stable'
        cache: true
        cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:'
    
    # 4. Verificar versiones
    - name: üîç Verify environment
      run: |
        echo "üìä Environment Information:"
        echo "=========================="
        flutter --version
        dart --version
        echo ""
        echo "üìã Flutter Doctor:"
        flutter doctor -v
    
    # 5. Cache de pub dependencies
    - name: üì¶ Cache pub dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.pub-cache
          .dart_tool
        key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-pub-
    
    # 6. Limpiar proyecto
    - name: üßπ Clean project
      run: flutter clean
    
    # 7. Obtener dependencias
    - name: üì¶ Get dependencies
      run: |
        flutter pub get
        flutter pub deps
    
    # 8. Build para web (sin par√°metros obsoletos)
    - name: üî® Build web application
      run: |
        echo "üèóÔ∏è Building Flutter web application..."
        echo "Base href: /${{ steps.repo_info.outputs.repo_name }}/"
        
        # Build sin --web-renderer (obsoleto en Flutter 3.32+)
        flutter build web \
          --release \
          --base-href "/${{ steps.repo_info.outputs.repo_name }}/" \
          --dart-define=FLUTTER_WEB_USE_SKIA=true \
          --dart-define=FLUTTER_WEB_USE_EXPERIMENTAL_CANVAS_TEXT=true
        
        # Verificar que el build fue exitoso
        if [ ! -d "build/web" ]; then
          echo "‚ùå Error: build/web directory not found!"
          exit 1
        fi
        
        # Mostrar informaci√≥n del build
        echo "‚úÖ Build completed successfully!"
        echo "üìÅ Build size: $(du -sh build/web | cut -f1)"
        echo "üìÑ Files generated: $(find build/web -type f | wc -l)"
        echo ""
        echo "üìã Build contents:"
        ls -la build/web/
    
    # 9. Optimizar build
    - name: üé® Optimize build
      run: |
        echo "üîß Optimizing build for production..."
        
        # Comprimir archivos JavaScript si existe gzip
        if command -v gzip &> /dev/null; then
          find build/web -type f -name "*.js" -exec gzip -k {} \;
          echo "‚úÖ JavaScript files compressed"
        fi
        
        # Crear versi√≥n minificada del index.html
        if [ -f build/web/index.html ]; then
          sed -i 's/  */ /g' build/web/index.html
          echo "‚úÖ HTML minified"
        fi
    
    # 10. Preparar archivos para GitHub Pages
    - name: üìù Prepare for GitHub Pages
      run: |
        echo "üì¶ Preparing files for GitHub Pages..."
        
        # A√±adir .nojekyll para evitar procesamiento Jekyll
        touch build/web/.nojekyll
        echo "‚úÖ Created .nojekyll"
        
        # Crear 404.html para manejar rutas del cliente
        cp build/web/index.html build/web/404.html
        echo "‚úÖ Created 404.html for client-side routing"
        
        # Crear archivo de verificaci√≥n
        echo "${{ github.sha }}" > build/web/deploy-version.txt
        echo "‚úÖ Created version file"
        
        # A√±adir CNAME si se proporciona dominio personalizado
        if [ ! -z "${{ secrets.CUSTOM_DOMAIN }}" ]; then
          echo "${{ secrets.CUSTOM_DOMAIN }}" > build/web/CNAME
          echo "‚úÖ Created CNAME file for custom domain"
        fi
        
        # Crear robots.txt b√°sico
        cat > build/web/robots.txt << EOF
        User-agent: *
        Allow: /
        Sitemap: ${{ steps.repo_info.outputs.deploy_url }}sitemap.xml
        EOF
        echo "‚úÖ Created robots.txt"
    
    # 11. Verificar rama gh-pages existe
    - name: üåø Ensure gh-pages branch exists
      run: |
        echo "üîç Checking for gh-pages branch..."
        
        # Verificar si la rama existe remotamente
        if git ls-remote --heads origin gh-pages | grep -q gh-pages; then
          echo "‚úÖ gh-pages branch already exists"
        else
          echo "üìù Creating gh-pages branch..."
          git checkout --orphan gh-pages
          git rm -rf . || true
          echo "<!DOCTYPE html><html><body><h1>Initializing GitHub Pages</h1></body></html>" > index.html
          git add index.html
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git commit -m "Initialize gh-pages branch"
          git push origin gh-pages
          git checkout ${{ github.ref_name }}
          echo "‚úÖ gh-pages branch created"
        fi
    
    # 12. Deploy a GitHub Pages
    - name: üöÄ Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./build/web
        publish_branch: gh-pages
        force_orphan: false
        keep_files: false
        user_name: 'github-actions[bot]'
        user_email: 'github-actions[bot]@users.noreply.github.com'
        commit_message: |
          üöÄ Deploy Flutter web app to GitHub Pages
          
          Build #${{ github.run_number }}
          Triggered by: ${{ github.event_name }}
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
          Message: ${{ github.event.inputs.deploy_message || github.event.head_commit.message }}
          
          View deployment: ${{ steps.repo_info.outputs.deploy_url }}
        cname: ${{ secrets.CUSTOM_DOMAIN }}
    
    # 13. Crear release (opcional)
    - name: üì¶ Create release
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ## üöÄ Automated Release
          
          **Build:** #${{ github.run_number }}
          **Commit:** ${{ github.sha }}
          **Deployment URL:** ${{ steps.repo_info.outputs.deploy_url }}
          
          ### Changes
          ${{ github.event.head_commit.message }}
        draft: false
        prerelease: false
      continue-on-error: true
    
    # 14. Verificar deployment
    - name: ‚úÖ Verify deployment
      run: |
        echo "üîç Verifying deployment..."
        echo "URL: ${{ steps.repo_info.outputs.deploy_url }}"
        echo ""
        echo "‚è≥ Waiting for GitHub Pages to update (this may take 1-10 minutes)..."
        
        # Esperar un momento para que GitHub Pages procese
        sleep 30
        
        # Intentar verificar el sitio
        MAX_ATTEMPTS=20
        ATTEMPT=1
        SUCCESS=false
        
        while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
          echo -n "Attempt $ATTEMPT/$MAX_ATTEMPTS: "
          
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "${{ steps.repo_info.outputs.deploy_url }}")
          
          if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "301" ] || [ "$HTTP_CODE" = "302" ]; then
            echo "‚úÖ Site is responding (HTTP $HTTP_CODE)"
            SUCCESS=true
            break
          else
            echo "‚è≥ Not ready yet (HTTP $HTTP_CODE)"
          fi
          
          if [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
            sleep 15
          fi
          
          ATTEMPT=$((ATTEMPT + 1))
        done
        
        echo ""
        if [ "$SUCCESS" = true ]; then
          echo "‚úÖ Deployment verified successfully!"
          echo "üåê Your site is live at: ${{ steps.repo_info.outputs.deploy_url }}"
        else
          echo "‚ö†Ô∏è Could not verify deployment immediately."
          echo "GitHub Pages may still be processing. Please check in a few minutes:"
          echo "${{ steps.repo_info.outputs.deploy_url }}"
        fi
    
    # 15. Notificaci√≥n de √©xito
    - name: üì¢ Post deployment summary
      if: always()
      run: |
        echo "================================================"
        echo "üìä DEPLOYMENT SUMMARY"
        echo "================================================"
        echo "Status: ${{ job.status }}"
        echo "Build: #${{ github.run_number }}"
        echo "Repository: ${{ github.repository }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo "Triggered by: ${{ github.actor }}"
        echo "Event: ${{ github.event_name }}"
        echo ""
        if [ "${{ job.status }}" = "success" ]; then
          echo "‚úÖ Deployment URL: ${{ steps.repo_info.outputs.deploy_url }}"
          echo ""
          echo "üéâ Deployment completed successfully!"
        else
          echo "‚ùå Deployment failed. Please check the logs above."
        fi
        echo "================================================"

  # Job 3: Notificaci√≥n (opcional)
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: always()
    
    steps:
    - name: üìß Send notification
      run: |
        if [ "${{ needs.build-and-deploy.result }}" = "success" ]; then
          echo "‚úÖ Deployment successful - notifications would be sent here"
        else
          echo "‚ùå Deployment failed - error notifications would be sent here"
        fi